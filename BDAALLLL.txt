
// Word Count Mapper program

import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

 
public class WordCountMapper extends
		Mapper<LongWritable, Text, Text, LongWritable> {
	
	private final static LongWritable one = new LongWritable(1);

	@Override
	protected void map(LongWritable key, Text value, Context context)
			throws IOException, InterruptedException {
		String line = value.toString();
		String[] words = line.split(" ");
		for (int i = 0; i < words.length; i++) {
			context.write(new Text(words[i]), one);
		}
	}
}


// Word Count Reducer program


import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.Text;

public class WordCountReducer extends Reducer<Text,LongWritable,Text,LongWritable> 
{
	@Override
	protected void reduce(Text key,Iterable<LongWritable> value,Context context)throws IOException,InterruptedException
	{
		long sum=0;
		while(value.iterator().hasNext())
		{
			sum+=value.iterator().next().get();
		}
		context.write(key,new LongWritable(sum));
	}
}


// Word count Driver Program

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.util.Tool;
public class WordCountJob implements Tool{
	private Configuration conf;
	@Override
	public Configuration getConf()
	{
	return conf;
	}
	@Override
	public void setConf(Configuration conf)
	{
		this.conf=conf;
	}
	@Override
	public int run(String []args)throws Exception
	{
		Job wordcountjob=new Job(getConf());
		wordcountjob.setJobName("mat word count");
		wordcountjob.setJarByClass(this.getClass());
		wordcountjob.setMapperClass(WordCountMapper.class);
		wordcountjob.setReducerClass(WordCountReducer.class);
				
		wordcountjob.setMapOutputKeyClass(Text.class);
		wordcountjob.setMapOutputValueClass(LongWritable.class);
		wordcountjob.setOutputKeyClass(Text.class);
		wordcountjob.setOutputValueClass(LongWritable.class);
		FileInputFormat.setInputPaths(wordcountjob,new Path(args[0]));
		FileOutputFormat.setOutputPath(wordcountjob,new Path(args[1]));
		wordcountjob.setNumReduceTasks(2);
		return wordcountjob.waitForCompletion(true)==true? 0:1;
	}
	public static void main(String []args)throws Exception
	{
		ToolRunner.run(new Configuration(),new WordCountJob(),args);
	}

}


Execution procedure

CREATE JAR FILE IN ECLIPSE
=========================

CREATE AN NPUT FILE IN LOCAL FILESYSTEM
======================================

cloudera@localhost ~]$ gedit wc1.txt
Hadoop is the Elephant King!
A yellow and elegant thing.
He never forgets
Useful data, or lets
An extraneous element cling!

COPY INPUT FIL INTO HDFS 
===============================================

[cloudera@localhost ~]$ hadoop fs -put wc1.txt word


 
RUN THE PROGRAM
===============

[cloudera@localhost ~]$ hadoop jar wcount.jar WordCountJob wc1.txt wordout


OUTPUT::
========

[cloudera@localhost ~]$ hadoop fs -ls wordout

Found 4 items
-rw-r--r--   3 cloudera cloudera          0 2016-06-10 00:01 wordout/_SUCCESS
drwxr-xr-x   - cloudera cloudera          0 2016-06-10 00:00 wordout/_logs
-rw-r--r--   3 cloudera cloudera        135 2016-06-10 00:01 wordout/part-r-00000
-rw-r--r--   3 cloudera cloudera        200 2016-06-10 00:01 wordout/part-r-00001

SEE THE CONTENTS OF THE REDUCER OUTPUT FILES
============================================

[cloudera@localhost ~]$ hadoop fs -cat wordout/part-r-00000
But	1
HDFS	1
Hadoop	1
Hadoop.	1
He	1
Hive,	1
The	1
data,	1
forgets	1
helps	1
him	1
lets	1
never	1
plays	1
the	2
thing.	1
thrive	1
to	1
[cloudera@localhost ~]$ hadoop fs -cat wordout/part-r-00001
A	2
An	1
And	1
Are	1
Elephant	1
Impala,	1
King!	1
Sqoop.	1
Useful	1
and	2
cling!	1
elegant	1
element	1
elephant	1
extraneous	1
group.	1
in	1
is	2
king	1
or	1
well	1
what	1
with	1
wonderful	1
yellow	1


// Max Temperature Driver program
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
//import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
public class MaxTemperature {
public static void main(String[] args) throws Exception {
if (args.length != 2) {
System.err.println("Usage: MaxTemperature <input path> <output path>");
System.exit(-1);
}
Job job = new Job();
job.setJarByClass(MaxTemperature.class);
job.setJobName("Max temperature");
FileInputFormat.addInputPath(job, new Path(args[0]));
FileOutputFormat.setOutputPath(job, new Path(args[1]));
job.setMapperClass(MaxTemperatureMapper.class);
job.setReducerClass(MaxTemperatureReducer.class);
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(IntWritable.class);
System.exit(job.waitForCompletion(true) ? 0 : 1);
}
}
// Max Temperature Mapper program
import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
public class MaxTemperatureMapper
extends Mapper<LongWritable, Text, Text, IntWritable> {
private static final int MISSING = 9999;
@Override
public void map(LongWritable key, Text value, Context context)
throws IOException, InterruptedException {
String line = value.toString();
String year = line.substring(15, 19);
int airTemperature;
if (line.charAt(87) == '+') { // parseInt doesn't like leading plus signs
airTemperature = Integer.parseInt(line.substring(88, 92));
} else {
airTemperature = Integer.parseInt(line.substring(87, 92));
}
String quality = line.substring(92, 93);
if (airTemperature != MISSING && quality.matches("[01459]")) {
context.write(new Text(year), new IntWritable(airTemperature));
}
}
}
// Max Temperature Reducer program
import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
public class MaxTemperatureReducer
extends Reducer<Text, IntWritable, Text, IntWritable> {
@Override
public void reduce(Text key, Iterable<IntWritable> values,
Context context)
throws IOException, InterruptedException {
int maxValue = Integer.MIN_VALUE;
for (IntWritable value : values) {
maxValue = Math.max(maxValue, value.get());
}
context.write(key, new IntWritable(maxValue));
}
}







exp 55555555555555




MatrixMultiplication:
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
public class MatrixMultiplication {
public static void main(String[] args) throws Exception {
Configuration conf = new Configuration();
// A is an m-by-n matrix; B is an n-by-p matrix.
conf.set("m", "2");
conf.set("n", "5");
conf.set("p", "3");
Job job = new Job(conf, "MatrixMultiplication");
job.setJarByClass(MatrixMultiplication.class);
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(Text.class);
job.setMapperClass(MatrixMapper.class);
job.setReducerClass(MatrixReducer.class);
job.setInputFormatClass(TextInputFormat.class);
job.setOutputFormatClass(TextOutputFormat.class);
FileInputFormat.addInputPath(job, new Path(args[0]));
FileOutputFormat.setOutputPath(job, new Path(args[1]));
job.waitForCompletion(true);
}
}
Create another class “MatrixMapper”

Copy and paste the program:
MatrixMapper:
import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
public class MatrixMapper extends Mapper<LongWritable, Text,
Text, Text> {
public void map(LongWritable key, Text value, Context
context) throws IOException, InterruptedException {
Configuration conf = context.getConfiguration();
int m = Integer.parseInt(conf.get("m"));
int p = Integer.parseInt(conf.get("p"));
String line = value.toString();
String[] indicesAndValue = line.split(",");
Text outputKey = new Text();
Text outputValue = new Text();
if (indicesAndValue[0].equals("A")) {
for (int k = 0; k < p; k++) {
outputKey.set(indicesAndValue[1] + "," + k);
outputValue.set("A," + indicesAndValue[2] + "," +
indicesAndValue[3]);
context.write(outputKey, outputValue);
}
} else {
for (int i = 0; i < m; i++) {
outputKey.set(i + "," + indicesAndValue[2]);
outputValue.set("B," + indicesAndValue[1] + "," +
indicesAndValue[3]);
context.write(outputKey, outputValue);
}
}
}
}Create another class “MatrixReducer”
MatrixReducer:
import java.io.IOException;
import java.util.HashMap;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
public class MatrixReducer extends Reducer<Text, Text, Text, Text> {
public void reduce(Text key, Iterable<Text> values, Context
context) throws IOException, InterruptedException {
String[] value;
HashMap<Integer, Float> hashA = new HashMap<Integer,
Float>();
HashMap<Integer, Float> hashB = new HashMap<Integer,
Float>();
for (Text val : values) {
value = val.toString().split(",");
if (value[0].equals("A")) {
hashA.put(Integer.parseInt(value[1]),
Float.parseFloat(value[2]));
} else {
hashB.put(Integer.parseInt(value[1]),
Float.parseFloat(value[2]));
}
}
int n =
Integer.parseInt(context.getConfiguration().get("n"));
float result = 0.0f;
float a_ij;
float b_jk;
for (int j = 0; j < n; j++) {
a_ij = hashA.containsKey(j) ? hashA.get(j) : 0.0f;
b_jk = hashB.containsKey(j) ? hashB.get(j) : 0.0f;
result += a_ij * b_jk;
}
if (result != 0.0f) {
context.write(null, new Text(key.toString() + "," +
Float.toString(result)));
}
}
}



EXP - 6

gedit f2;

10,FINANCE,EDINBURGH
20,SOFTWARE,PADDINGTON
30,SALES,MAIDSTONE
40,MARKETING,DARLINGTON
50,ADMIN,BIRMINGHAM


pig -x local 

fs -ls

 A = LOAD '/home/cloudera/f2' USING PigStorage(',') AS (a1:int,a2:chararray,a3:chararray) ;

DESCRIBE A;

dump a;

B = FILTER A BY a2='FINANCE';

dump B;

f3 = foreach A generate a1,a2;
 dump f3
f4 = order  A by a2 desc;       
dump f4;


exp 777777777777777-----------------------------------------------------------


 cat a.txt
 
10
20
30
40
50
60
70
80

A = LOAD '/user/cloudera/a.txt' USING PigStorage() AS (age:int);

dump A;

gr= group A by age;


gedit a.txt
1,2,3
4,2,1
8,3,4
4,3,3
7,2,5
8,4,3
gedit b.txt;
2,4
8,9
1,3
2,7
2,9
4,6
4,9
SELF JOIN:

ONE= load 'a.txt' using PigStorage(',') as (a1:int,a2:int,a3:int);
TWO = load 'a.txt' using PigStorage(',') as (a1:int,a2:int,a3:int);

SELFJ = JOIN ONE by a1 , TWO BY a1;
dump SELFj;


EQUI JOIN:

ONE= load 'a.txt' using PigStorage(',') as (a1:int,a2:int,a3:int);
TWO = load 'a.txt' using PigStorage(',') as (a1:int,a2:int,a3:int);

SELFJ = JOIN ONE by a1 , TWO BY a1;
dump SELFj;


leftjoin----

A = LOAD ‘A.txt' using PigStorage(',') AS (a1:int,a2:int,a3:int);
B = LOAD, ‘B.txt' using PigStorage(',') AS (b1:int,b2:int);
LEFTJ = JOIN A by a1 LEFT OUTER, B BY b1;
DUMP LEFTJ;

RightJoin--------

A = LOAD ‘A.txt' using PigStorage(',') AS (a1:int,a2:int,a3:int);
B = LOAD, ‘B.txt' using PigStorage(',') AS (b1:int,b2:int);
RIGHTJ = JOIN A by a1 RIGHT OUTER, B BY b1;
DUMP RIGHTJ;


fulljoin-------
A = LOAD ‘A.txt' using PigStorage(',') AS (a1:int,a2:int,a3:int);
B = LOAD, ‘B.txt' using PigStorage(',') AS (b1:int,b2:int);
FULLJ = JOIN A by a1 FULL, B BY b1;
DUMP FULl;

c = UNION a, b;

SPLIT c into sp1 if $0 == 4, sp2 if $0 == 8;



exp 8 -----------------


Open Oracle VM Virtual box -> click start -> open cloudera -> open eclipse.

import java.io.IOException;
 import org.apache.pig.EvalFunc;
 import org.apache.pig.data.Tuple;
 public class UPPER extends EvalFunc<String>
{
 public String exec(Tuple input) throws IOException {
 if (input == null || input.size() == 0 || input.get(0) == null)
 return null;
 try{
 String str = (String)input.get(0);
 return str.toUpperCase();
 }catch(Exception e){
 throw new IOException("Caught exception processing input row ", e);
 }
 }
 }  UPPER
gedit pigsample2.txt


1, Divya, CSE
2, Padhu, CSE
3, Mouni, CSE
4, Nuthana, IT
5, Suma, IT
5, Swathi, AIDS
7, Raju, ECE
B, Manoj, ECE
, Rakesh, EEE
10, Suresh, AIML



REGISTER udf.jar

DEFINE myfun UPPER();

stu= load '/home/cloudera/pigsample2.txt'   using PigStorage(',' )as (sid:int,sname: chararray, dept:chararray); 


stu_UPPER = FOREACH stu GENERATE myfun(sname);


DUMP stu_UPPER;

exp 9 ------------------------------------


hive
CREATE DATABASE [IF NOT EXISTS] student;
CREATE SCHEMA student;
 show databases;


drop database student;

create table stu(sno int, name string, branch string);

 describe stu;
or 

CREATE TABLE student ( 
    rno INT,
    name STRING,
    branch STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ' '
STORED AS TEXTFILE;


gedit sample.txt

501 Ravi CSE
502 Rani CSE
1201 Raja IT
1202 Roja IT
4201 vinay AI&ML

load data local inpath '/home/cloudera/sample.txt' overwrite into table stu;



ALTER TABLE stu RENAME TO emp;

alter table stu add columns(total string);
alter table stu drop columns(total string);
alter table stu change sno rno int;

//sel
DELETE FROM students WHERE rno=4201;
drop table emp;

exp 10 ------------------------------------


select * from table;


select * from student order by sno asc;

select * from student sort by sno desc;

select min(m1) from student;

select max(m1) from student;


select count(*) from student;

select sum(m1) from student;


SELECT sales.*, products.*
FROM sales
JOIN products ON sales.pid = products.prodid;

SELECT sales.*, products.*
FROM sales
LEFT OUTER JOIN products ON sales.pid = products.prodid; 

SELECT sales.*, products.*
FROM sales
RIGHT OUTER JOIN products ON sales.pid = products.prodid; 


SELECT sales.*, products.*
FROM sales
RIGHT OUTER JOIN products ON sales.pid = products.prodid; 

exp12----------------------------------------------


create table student( ID String, name String, marksint) ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;
load data local inpath '/home/cloudera /fi.txt' into table student;

add jar /home/cloudera /hivefunction.jar;
create temporary function lowe_leters as 'hiveudf';
select lowe_leters(name) from student;
hive –f filename.q 



hive> create table nn(n1 int,n2 int)
    > row format delimited
    > fields terminated by ' '
    > lines terminated by '\n'
    > stored as textfile;

hive> create table pp(p1 int,p2 int)
    > row format delimited
    > fields terminated by ' '
    > lines terminated by '\n'
    > stored as textfile;

load data local inpath '/home/cloudera /s1.txt' into table nn;
load data local inpath '/home/cloudera /s2.txt' into table pp;




hive> select nn.*,ppp.*
    > from nn  
    > join ppp on nn.n1= ppp.p1;


hive> select nn.*,ppp.*
    > from nn  
    > left outer join ppp on nn.n1= ppp.p1;


hive> select nn.*,ppp.*
    > from nn  
    > right outer join ppp on nn.n1= ppp.p1;



exp 11 ----------------

create view sview
 as select * from nn;

select * from sview;

alter view svieww as select * from sview;

DROP VIEW IF EXISTS svieww;


CREATE INDEX index_sno ON TABLE nn (n1)
AS 'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler'
WITH DEFERRED REBUILD;
SHOW INDEX ON student;
ALTER INDEX index_sno ON nn REBUILD;

BITmapping


CREATE INDEX index_sno ON TABLE nn (n1)
AS 'BITMAP'
WITH DEFERRED REBUILD;

SHOW INDEX ON student;
























